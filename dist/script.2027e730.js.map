{"version":3,"sources":["items.json","util/formatCurrency.js","util/addGlobalEventListener.js","shoppingCart.js","store.js","script.js"],"names":["module","exports","id","name","category","priceCents","imageColor","options","style","currency","formatter","Intl","NumberFormat","undefined","formatCurrency","amount","format","addGlobalEventListener","type","selector","callback","document","addEventListener","e","target","matches","cartButton","querySelector","cartItemsWrapper","cartItemTemplate","cartItemsContainer","cartQuantity","cartTotal","cart","SESSION_STORAGE_KEY","shoppingCart","setupShoppingCart","removeFromCart","parseInt","closest","dataset","itemId","loadCart","renderCart","classList","toggle","addToCart","existingItem","find","entry","quantity","push","saveCart","filter","showCart","remove","hideCart","add","length","renderCartItems","innerHTML","innerText","totalCents","reduce","sum","items","item","forEach","cartItem","content","cloneNode","src","appendChild","sessionStorage","setItem","JSON","stringify","getItem","parse","storeItemContainer","storeItemTemplate","renderStoreItem","storeItem","setupStore"],"mappings":"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","file":"script.2027e730.js","sourceRoot":"..","sourcesContent":["module.exports=[{id:1,name:\"Red\",category:\"Primary Color\",priceCents:1600,imageColor:\"F00\"},{id:2,name:\"Yellow\",category:\"Primary Color\",priceCents:2100,imageColor:\"FF0\"},{id:3,name:\"Blue\",category:\"Primary Color\",priceCents:1200,imageColor:\"00F\"},{id:4,name:\"Orange\",category:\"Secondary Color\",priceCents:1800,imageColor:\"F60\"},{id:5,name:\"Green\",category:\"Secondary Color\",priceCents:1600,imageColor:\"0F0\"},{id:6,name:\"Purple\",category:\"Secondary Color\",priceCents:2100,imageColor:\"60F\"},{id:7,name:\"Light Gray\",category:\"Grayscale\",priceCents:1200,imageColor:\"AAA\"},{id:8,name:\"Dark Gray\",category:\"Grayscale\",priceCents:1600,imageColor:\"333\"}];","const options = {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n};\r\n\r\nconst formatter = new Intl.NumberFormat(undefined, options);\r\n\r\nexport default function formatCurrency(amount) {\r\n  return formatter.format(amount);\r\n}\r\n","export default function addGlobalEventListener(type, selector, callback) {\r\n  document.addEventListener(type, (e) => {\r\n    if (e.target.matches(selector)) {\r\n      //       const id = e.target.closest('[data-store-item]').dataset.itemId;\r\n      //       addToCart(parseInt(id));\r\n      callback(e);\r\n    }\r\n  });\r\n}\r\n","import items from './items.json';\r\nimport formatCurrency from './util/formatCurrency.js';\r\nimport addGlobalEventListener from './util/addGlobalEventListener.js';\r\n\r\n// Selectors\r\nconst cartButton = document.querySelector('[data-cart-button]');\r\nconst cartItemsWrapper = document.querySelector('[data-cart-items-wrapper]');\r\nconst cartItemTemplate = document.querySelector('#cart-item-template');\r\nconst cartItemsContainer = document.querySelector('[data-cart-items-container]');\r\nconst cartQuantity = document.querySelector('[data-cart-quantity]');\r\nconst cartTotal = document.querySelector('[data-cart-total]');\r\nconst cart = document.querySelector('[data-cart]');\r\nconst SESSION_STORAGE_KEY = 'SHOPPING_CART-cart';\r\nlet shoppingCart = [];\r\n\r\nexport function setupShoppingCart() {\r\n  addGlobalEventListener('click', '[data-remove-cart-button]', (e) => {\r\n    const id = parseInt(e.target.closest('[data-item]').dataset.itemId);\r\n    removeFromCart(id);\r\n  });\r\n  shoppingCart = loadCart();\r\n  renderCart();\r\n\r\n  cartButton.addEventListener('click', () => {\r\n    cartItemsWrapper.classList.toggle('invisible');\r\n  });\r\n}\r\n\r\n// Add items to cart\r\nexport function addToCart(id) {\r\n  const existingItem = shoppingCart.find((entry) => entry.id === id);\r\n\r\n  // Handle multiple of the same item in the cart\r\n  if (existingItem) {\r\n    existingItem.quantity++;\r\n  } else {\r\n    shoppingCart.push({ id: id, quantity: 1 });\r\n  }\r\n  renderCart();\r\n  saveCart();\r\n}\r\n\r\n// Remove items from the cart\r\nfunction removeFromCart(id) {\r\n  const existingItem = shoppingCart.find((entry) => entry.id === id);\r\n  if (existingItem == null) return;\r\n  shoppingCart = shoppingCart.filter((entry) => entry.id !== id);\r\n  renderCart();\r\n  saveCart();\r\n}\r\n\r\n// show/hide the cart when clicked\r\nfunction showCart() {\r\n  cart.classList.remove('invisible');\r\n}\r\n\r\nfunction hideCart() {\r\n  cart.classList.add('invisible');\r\n  cartItemsWrapper.classList.add('invisible');\r\n}\r\n\r\n// show/hide the cart button when it has no items or when it goes from 0 to 1 item\r\nfunction renderCart() {\r\n  if (shoppingCart.length === 0) {\r\n    hideCart();\r\n  } else {\r\n    showCart();\r\n    renderCartItems();\r\n  }\r\n}\r\n\r\nfunction renderCartItems() {\r\n  cartItemsContainer.innerHTML = '';\r\n  cartQuantity.innerText = shoppingCart.length;\r\n\r\n  // calculate accurate total\r\n  const totalCents = shoppingCart.reduce((sum, entry) => {\r\n    const item = items.find((item) => entry.id === item.id);\r\n    return sum + item.priceCents * entry.quantity;\r\n  }, 0);\r\n\r\n  cartTotal.innerText = formatCurrency(totalCents / 100);\r\n  shoppingCart.forEach((entry) => {\r\n    const item = items.find((item) => entry.id === item.id);\r\n    const cartItem = cartItemTemplate.content.cloneNode(true);\r\n\r\n    const container = cartItem.querySelector('[data-item]');\r\n    container.dataset.itemId = item.id;\r\n\r\n    const name = cartItem.querySelector('[data-name]');\r\n    name.innerText = item.name;\r\n\r\n    if (entry.quantity > 1) {\r\n      const quantity = cartItem.querySelector('[data-quantity]');\r\n      quantity.innerText = `x${entry.quantity}`;\r\n    }\r\n\r\n    const image = cartItem.querySelector('[data-image]');\r\n    image.src = `https://dummyimage.com/210x130/${item.imageColor}/${item.imageColor}`;\r\n\r\n    const price = cartItem.querySelector('[data-price]');\r\n    price.innerText = formatCurrency((item.priceCents * entry.quantity) / 100);\r\n\r\n    cartItemsContainer.appendChild(cartItem);\r\n  });\r\n}\r\n\r\n// saving cart items to session storage\r\nfunction saveCart() {\r\n  sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(shoppingCart));\r\n}\r\n\r\n// loading cart items from session storage\r\nfunction loadCart() {\r\n  const cart = sessionStorage.getItem(SESSION_STORAGE_KEY);\r\n  return JSON.parse(cart) || [];\r\n}\r\n","import items from './items.json';\r\nimport formatCurrency from './util/formatCurrency';\r\nimport addGlobalEventListener from './util/addGlobalEventListener.js';\r\nimport { addToCart } from './shoppingCart.js';\r\n\r\nconst storeItemContainer = document.querySelector('[data-store-container]');\r\nconst storeItemTemplate = document.querySelector('#store-item-template');\r\n\r\nfunction renderStoreItem(item) {\r\n  const storeItem = storeItemTemplate.content.cloneNode(true);\r\n\r\n  const container = storeItem.querySelector('[data-store-item]');\r\n  container.dataset.itemId = item.id;\r\n\r\n  const name = storeItem.querySelector('[data-name]');\r\n  name.innerText = item.name;\r\n\r\n  const category = storeItem.querySelector('[data-category]');\r\n  category.innerText = item.category;\r\n\r\n  const image = storeItem.querySelector('[data-image]');\r\n  image.src = `https://dummyimage.com/210x130/${item.imageColor}/${item.imageColor}`;\r\n\r\n  const price = storeItem.querySelector('[data-price]');\r\n\r\n  price.innerText = formatCurrency(item.priceCents / 100);\r\n\r\n  storeItemContainer.appendChild(storeItem);\r\n}\r\n\r\n// Note: confusing part\r\nexport function setupStore() {\r\n  if (storeItemContainer == null) return;\r\n\r\n  // Handle click event for adding\r\n  addGlobalEventListener('click', '[data-add-to-cart-button]', (e) => {\r\n    const id = e.target.closest('[data-store-item]').dataset.itemId;\r\n    addToCart(parseInt(id));\r\n  });\r\n\r\n  items.forEach(renderStoreItem);\r\n}\r\n","import { setupStore } from './store.js';\r\nimport { setupShoppingCart } from './shoppingCart.js';\r\n\r\nsetupStore();\r\nsetupShoppingCart();\r\n"]}